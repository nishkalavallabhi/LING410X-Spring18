gsub("\\D\\d{2}\\D", " NUM\\2 ", cyclones_lower)
cyclones_lower
gsub("^[0-9]{2}$", " NUM\\2 ", cyclones_lower)
gsub("^[0-9]{2}$", " NUM ", cyclones_lower)
gsub("\\s[0-9]{2}$", " NUM ", cyclones_lower)
gsub("\\s[0-9]{2}", " NUM ", cyclones_lower)
gsub("(\\s|\\()[0-9]{2}(\\s|\\)|th)", " NUM ", cyclones_lower)
cyclones_lower
gsub("(\\s|\\()[0-9]{2}(\\s|\\)|th)", "\\1NUM\\2", cyclones_lower)
strsplit(cyclones_lower,"\\.")
toTitleCase(cyclones_lower)
library(tools)
toTitleCase(cyclones_lower)
library(stringr)
str_to_title(cyclones_lower)
install.packages("twitteR")
install.packages("ROAuth")
install.packages(c("twitteR", "streamR"))
library(ROAuth)
library(twitteR)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
my_api_key <- "jGXXJFeTs1FSksrd3VSwBxR6D"
my__api_secret <- "B0tAN6pCcF8YkSLXi3nNZAJYlKKoK9bKQZBbBvJKtE7RyV4B1a"
my_oauth <- OAuthFactory$new(consumerKey=my_api_key, consumerSecret=my_api_secret, requestURL=requestURL, accessURL=accessURL, authURL=authURL)
my_api_key <- "jGXXJFeTs1FSksrd3VSwBxR6D"
my_api_secret <- "B0tAN6pCcF8YkSLXi3nNZAJYlKKoK9bKQZBbBvJKtE7RyV4B1a"
my_oauth <- OAuthFactory$new(consumerKey=my_api_key, consumerSecret=my_api_secret, requestURL=requestURL, accessURL=accessURL, authURL=authURL)
save(my_oauth, file="oauth_token.Rdata")
accessToken = '634512278-zXpfdtx7isxdAoK8YHnc78QfswLbMssnUgvLEfga'
accessSecret = 'OuW5FdB0UOUTJoixRbIwJaQwdFtZ0zZCClM15tj8Oyy0g'
setup_twitter_oauth(consumer_key=my_key, consumer_secret=my_secret, access_token=accessToken, access_secret=accessSecret)
tweets <- searchTwitter("Iowa", n=100)
setup_twitter_oauth(consumer_key=my_api_key, consumer_secret=my_api_secret, access_token=accessToken, access_secret=accessSecret)
tweets <- searchTwitter("Iowa", n=100)
my_oauth <- OAuthFactory$new(consumerKey=my_api_key, consumerSecret=my_api_secret, requestURL=requestURL,
accessURL=accessURL, authURL=authURL)
rm(list = ls())
library(ROAuth)
library(twitteR)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
my_key <- "jGXXJFeTs1FSksrd3VSwBxR6D"
my_oauth <- OAuthFactory$new(consumerKey=my_key, consumerSecret=my_secret, requestURL=requestURL, accessURL=accessURL, authURL=authURL)
my_secret <- "B0tAN6pCcF8YkSLXi3nNZAJYlKKoK9bKQZBbBvJKtE7RyV4B1a"
my_oauth <- OAuthFactory$new(consumerKey=my_key, consumerSecret=my_secret, requestURL=requestURL, accessURL=accessURL, authURL=authURL)
accessToken = '634512278-zXpfdtx7isxdAoK8YHnc78QfswLbMssnUgvLEfga'
accessSecret = 'OuW5FdB0UOUTJoixRbIwJaQwdFtZ0zZCClM15tj8Oyy0g'
setup_twitter_oauth(consumer_key=my_key, consumer_secret=my_secret, access_token=accessToken, access_secret=accessSecret)
tweets <- searchTwitter("Iowa", n=100)
tweets_frame <- twListToDF(tweets)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
moby <- scan("mobydick.txt", what = "character", sep = "\n")
moby.start <- which (moby ==  "CHAPTER 1. Loomings.")
moby.end <- which (moby == "orphan.")
moby.actual <- moby[moby.start:moby.end]
moby.chap.positions <- grep("^CHAPTER \\d", moby.actual)
#moby.actual[moby.chap.positions]
moby <- scan("mobydick.txt", what = "character", sep = "\n")
moby.start <- which (moby ==  "CHAPTER 1. Loomings.")
moby.end <- which (moby == "orphan.")
moby.actual <- moby[moby.start:moby.end]
moby.chap.positions <- grep("^CHAPTER \\d", moby.actual)
moby.last.position <- length(moby.actual)
moby.chap.positions <- c(moby.chap.positions, moby.last.position)
moby.chap.positions
chapters.raw <- list()
for (i in 1:(length(moby.chap.positions) -1))
{
titleline <- moby.chap.positions[i]
title <- moby.actual[titleline]
start <- titleline+1
end   <- moby.chap.positions[i+1]-1
chapter.lines <- moby.actual[start:end]
chapter.string <- tolower(paste(chapter.lines, collapse = " "))
chapter.string <- gsub(" +", " ", gsub("[[:punct:]]", " ", chapter.string))
chapter.words <- unlist(strsplit(chapter.string, "\\W"))
chapter.freqs <- table(chapter.words)
chapters.raw[[title]] <- chapter.freqs
}
vector1 $<-$ c(name="Sowmya", courseNum=410, office=331, address="Ross")
vector1 <- c(name="Sowmya", courseNum=410, office=331, address="Ross")
vector1
lista <- list(1,2,3,4)
vectora <- c(1,2,3,4)
listb <- list(1,"a",TRUE,4)
vectorb <- c(1, "a", TRUE, 4)
list1 <- list(name="Sowmya", courseNum=410, office=331, address="Ross")
vector1 <- c(name="Sowmya", courseNum=410, office=331, address="Ross")
chapters.raw
vector1 <- c(1, "a", TRUE, 4)
vector1\
vector1
list1 <- list(1, "a", TRUE, 4)
list1
list1 <- list(name="Sowmya", courseNum=410, office=331, address="Ross")
vector1 <- c(name="Sowmya", courseNum=410, office=331, address="Ross")
list1
vector1
chapters.raw[[1]]
chapters.raw[1]
chapters.raw[[1]][1]
chapters.raw[[1]][[1]]
whaledetails < −lapply (chapters.raw , ”[”, ”whale”)
whaledetails <− lapply (chapters.raw , ”[”, ”whale”)
whaledetails <− lapply (chapters.raw , "[", "whale")
whaledetails <- lapply (chapters.raw , "[", "whale")
whaledetails
whale_counts = c()
for (i in 1:length(whale))
{
whale_counts[i] <- whale[[i]]
}
whale <- lapply(chapters.raw, "[", "whale")
whale_counts = c()
for (i in 1:length(whale))
{
whale_counts[i] <- whale[[i]]
}
whale_counts
plot(whale_counts)
plot(whale_counts, type="h")
plot(whale_counts, type="b")
?table
?sort
typeof(sort)
typeof(?sort)
?seq
matrix(1:6, ncol=3)
m <-  matrix(1:6, ncol=3)
m[1,]
m[,1]
array(1:8, dim=c(2, 2, 2))
array(1:8, dim=c(2, 1, 2))
array(1:8, dim=c(2, 2, 2))
array(1:4, dim=c(2, 1, 2))
array(1:4, dim=c(2, 2, 2))
array(1:4, dim=c(2, 2))
a <- seq(1:5)
line_number <- seq(1:5)
names <- c("Santa", "Banta", "Manta", "Tanta", "Anton")
college <- c("LAS", "Business", "Engineering", "LAS", VetMed)
college <- c("LAS", "Business", "Engineering", "LAS", "VetMed")
data.frame(line_number,names, college)
df <- data.frame(line_number,names, college)
df$line_number
df$college
factor(df$college)
factor(college)
moby <- scan("mobydick.txt", what = "character", sep = "\n")
moby.start <- which (moby ==  "CHAPTER 1. Loomings.")
moby.end <- which (moby == "orphan.")
moby.actual <- moby[moby.start:moby.end]
moby.chap.positions <- grep("^CHAPTER \\d", moby.actual)
moby.actual[moby.chap.positions]
moby.last.position <- length(moby.actual)
moby.chap.positions <- c(moby.chap.positions, moby.last.position)
moby.actual[moby.chap.positions]
chapters.raw <- list()
for (i in 1:(length(moby.chap.positions) -1))
{
titleline <- moby.chap.positions[i]
title <- moby.actual[titleline]
start <- titleline+1
end   <- moby.chap.positions[i+1]-1
chapter.lines <- moby.actual[start:end]
chapter.string <- tolower(paste(chapter.lines, collapse = " "))
chapter.string <- gsub(" +", " ", gsub("[[:punct:]]", " ", chapter.string))
chapter.words <- unlist(strsplit(chapter.string, "\\W"))
chapter.freqs <- table(chapter.words)
chapters.raw[[title]] <- chapter.freqs
}
chapters.raw[[1]]
sum(chapters.raw[[1]])
length(chapers[[1]])
length(chapters.raw[[1]])
sum_of_all_word_freqs_chapter1 <- sum(chapters_raw[[1]])
num_words_in_chapter1 <- length(chapters_raw[[1]])
mean_word_freq_chapter1 <- sum_of_all_word_freqs_chapter1/num_words_in_chapter1
sum_of_all_word_freqs_chapter1 <- sum(chapters.raw[[1]])
num_words_in_chapter1 <- length(chapters.raw[[1]])
mean_word_freq_chapter1 <- sum_of_all_word_freqs_chapter1/num_words_in_chapter1
mean_word_freq_chapter1
mean(chapters.raw[[1]])
lapply(chapters.raw, "[[")
lapply(chapters.raw, "[")
?sapply
lapply(chapters.raw, mean)
lapply(chapters.raw, mean)
length(chapters.raw)
means = c()
for(i in 1:length(chapters.raw))
{
means[i] <- sum(chapters.raw[[i]])/length(chapters.raw)
}
means
means = c()
for(i in 1:length(chapters.raw))
{
means[i] <- sum(chapters.raw[[i]])/length(chapters.raw[[i]])
}
means
matrix(lapply(chapters.raw,mean))
vector(lapply(chapters.raw,mean))
?rbind
rbind(lapply(chapters.raw, mean))
?lapply
sapply(chapters.raw, mean)
trial <- sapply(chapters.raw, mean)
class(trial)
typeof(trial)
trial <- sapply(chapters.raw, mean, simplify="vector")
trial
trial[[1]]
trial[[2]]
plot(trial)
trial <- sapply(chapters.raw, mean)
trial <- lapply(chapters.raw, mean)
plot(trial)
trial <- sapply(chapters.raw, mean)
trial <- lapply(chapters.raw, mean)
trial
typeof(trial)
unname(trial)
unlist(unname(trial))
trial <- lapply(chapters.raw, mean)
unlist(trial)
trial <- lapply(chapters.raw, mean)
unlist(trial)
unname(unlist(trial))
means <- lapply(chapters.raw, mean)
means <- unlist(means)
means <- unname(means)
means
par(mfrow=c(1,2))
plot(means, type="h")
plot(scale(means), type = "h")
means <- lapply(chapters.raw, mean)
sort(means)
means <- unlist(means)
sort(means)
sort(means, decreasing=TRUE)
hapax <- sapply(chapters.raw, function(x) sum(x == 1))
hapax
unname(hapax)
unlist(hapax)
unname(hapax)
lapply(chapters.raw,length)
lapply(chapters.raw,sum)
hapax <- sapply(chapters.raw, function(x) sum(x == 1))
hapax <- unname(hapax)
lengths <- lapply(chapters.raw, sum)
new <- hapax/lengths
lengths
hapax <- sapply(chapters.raw, function(x) sum(x == 1))
hapax <- unname(hapax)
lengths <- lapply(chapters.raw, sum)
new <- hapax/lengths
hapax <- sapply(chapters.raw, function(x) sum(x == 1))
hapax <- unname(hapax)
lengths <- unname(sapply(chapters.raw, sum))
new <- hapax/lengths
new
?par
hapax <- sapply(chapters.raw, function(x) sum(x == 1:5))
hapax
moby <- scan("mobydick.txt", what = "character", sep = "\n")
moby.start <- which (moby ==  "CHAPTER 1. Loomings.")
moby.end <- which (moby == "orphan.")
moby.actual <- moby[moby.start:moby.end]
moby <- scan("mobydick.txt", what = "character", sep = "\n")
moby.start <- which (moby ==  "CHAPTER 1. Loomings.")
moby.end <- which (moby == "orphan.")
moby.actual <- moby[moby.start:moby.end]
moby.actual <- tolower(paste(moby.actual, collapse = " "))
moby.actual <- gsub(" +", " ", gsub("[[:punct:]]", " ", moby.actual)
moby.words <- unlist(strsplit(moby.actual, "\\W"))
moby.freqs <- table(moby.words)
moby <- scan("mobydick.txt", what = "character", sep = "\n")
moby.start <- which (moby ==  "CHAPTER 1. Loomings.")
moby.end <- which (moby == "orphan.")
moby.actual <- moby[moby.start:moby.end]
moby.actual <- tolower(paste(moby.actual, collapse = " "))
moby.actual <- gsub(" +", " ", gsub("[[:punct:]]", " ", moby.actual)
)
moby.words <- unlist(strsplit(moby.actual, "\\W"))
moby.freqs <- table(moby.words)
moby.freqs
max_freq <- sort(moby.freqs, decreasing = TRUE)
max_freq <- sort(moby.freqs, decreasing = TRUE)[1]
max_freq
max_freq <- sort(moby.freqs, decreasing = TRUE)[[1]]
max_freq
what_i_want <- c()
for(i in min_freq:max_freq)
{
what_i_want[i] <- length(sapply(moby.freqs, function(x) x==i))
}
what_i_want
min_freq <- 1
what_i_want <- c()
for(i in min_freq:max_freq)
{
what_i_want[i] <- length(sapply(moby.freqs, function(x) x==i))
}
min_freq <- 1
what_i_want <- c()
for(i in min_freq:100)
{
what_i_want[i] <- length(sapply(moby.freqs, function(x) x==i))
}
what_i_want
what_i_want <- c()
for(i in min_freq:100)
{
what_i_want[i] <- length(sapply(moby.freqs, function(x) sum(x==i)))
}
what_i_want
moby.freqs
max_freq
sapply(moby.freqs, function(x) sum(x)==1)
max_freq
sapply(moby.freqs, function(x) sum(x)==14715)
length(sapply(moby.freqs, function(x) sum(x)==14715))
sapply(moby.freqs, function(x) sum(x)==14715)
sapply(moby.freqs, function(x) sum(x)==14715)["TRUE"]
length(which(sapply(moby.freqs, function(x) sum(x)==14715))
)
length(which(sapply(moby.freqs, function(x) sum(x)==1))
)
length(which(sapply(moby.freqs, function(x) sum(x)==1)))
max_freq
length(which(sapply(moby.freqs, function(x) sum(x)==14175)))
for(i in min_freq:100)
{
what_i_want[i] <- length(which(sapply(moby.freqs, function(x) sum(x)==14175)))
}
plot(what_i_want)
for(i in min_freq:100)
{
what_i_want[i] <- length(which(sapply(moby.freqs, function(x) sum(x)==i)))
}
plot(what_i_want)
plot(unname(sort(moby.freqs, decreasing = TRUE)))
plot(moby.freqs)
freqslist <- unname(sort(moby.freqs, decreasing = TRUE))
freqslist
plot(freqslist, type="b")
plot(freqslist)
plot(unlist(freqslist))
typeof(freqslist)
freqslist <- sort(moby.freqs, decreasing = TRUE)
freqslist <- unlist(sort(moby.freqs, decreasing = TRUE))
freqslist
length(moby.freqs)
length(freqslist)
vec <- unname(freqslist)
typeof(vec)
class(vec)
plot(vec)
class(freqslist)
library(mallet)
install.packages("rJava")
R
quit()
library("rJava")
library("mallet")
quit()
library(stylo)
mycsvfile[1:3]
file_path = "/home/bangaru/Dropbox/ClassroomSlides-BothCourses/LING410X/Resources/20Apr2017/twitter-sentiment.csv"
mycsvfile = read.csv(file_path, head=TRUE)
colnames(mycsvfile)
#This gives you column names in the csv file. You can choose the column name you want by using $ sign.
#mycsvfile$ItemID #Gives you the entire column.
#mycsvfile[,1] #Also does the same thing because that is the first column.
#mycsvfile[1,] #Gives you the first ROW of this file after the header.
mycsvfile[1:3]
mycsvfile[,1:3]
library(GuardianR)
results <- get_guardian("united+states", section="world", from.date="2014-09-16", to.date="2014-09-16", api.key="8b40468e-139b-4d90-94ac-1f74d22fd291")
names(results)
nrow(results)
ncol(results)
resutls1]
resutls[1]
resutls["1"]
results[1]
results[2]
library(ngram)
text = "Trying this out right now to see see it see to see"
unigrams <- ngram(text, n=2)
unigrams
head(get.phrasetable(unigrams),n = 6)
install.packages("swirl")
library(swirl)
swirl()
1:20
pi:10
15:1
?:
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2), each=10)
3+4
c = "Sowmya"
c
install.packages("swirl")
library(swirl)
swirl()
5+7
?abs
?paste
5+7
x ,-5 + 7
x <-5 + 7
0
0
x
quit()
list4 <- list(first="Sowmya", course=410, office=331, address="Ross")
list4[1]
list4[[1]]
library(rtimes)
Sys.setenv(NYTIMES_AS_KEY = "c67c9de54f894135ac568dda4f7679ee")
res1 <- as_search(q="artificial intelligence", begin_date = "20081001", end_date = "20081201")
res1$data$snippet
res1
res1$data
res1$data$Snippet
res1$data["Snippet"]
names(res1$data)
res1
names(res1)
names(res1$data)
res1$data
res1$data[[1]]
install.packages("rtimes")
Sys.setenv(NYTIMES_AS_KEY = "c67c9de54f894135ac568dda4f7679ee")
library(rtimes)
res1 <- as_search(q="artificial intelligence", begin_date = "20081001", end_date = "20081201")
names(res1)
res1$data
namse(res1$data)
names(res1$data)
list4 <- list(first="Sowmya", course=410, office=331, address="Ross")
vector4 <- c(first="Sowmya", course=410, office=331, address="Ross")
names(list4)
names(vector4)
vector4["course"]
list4
list4[1]
list4[[1]]
is.list(vector4)
is.vector(vector4)
library(rtimes)
Sys.setenv(NYTIMES_AS_KEY = "c67c9de54f894135ac568dda4f7679ee")
res1 <- as_search(q="artificial intelligence", begin_date = "20081001", end_date = "20081201")
res1
names(res1)
res1$data
names(res1$data)
res1$data$web_url
res1$data$snippet
snippets_2008 <-  res1$data$snippet
for (snippet in snippets_2008) {
print(tolower(snippet))
}
df <- data.frame(res1$data$snippet,res1$data$pub_date)
write.csv(df,"temp.csv")
getwd()
install.packages(c("tm", "caret"))
install.packages("RTextTools")
install.packages(c("tm", "RTextTools"))
install.packages("tm")
install.packages("xml2")
install.packages("Rcpp")
install.packages("tm")
install.packages("RTextTools")
setwd("~/Desktop/Teaching@ISU/SPRING18/LING410X/Assignments/Assignment4")
library(RTextTools)
library(tm)
trace("create_matrix", edit=T)
data_train <- read.csv("sentiment_sentences_trainingdata.csv", header = TRUE)
data_test <- read.csv("sentiment_sentences_testdata.csv", header = TRUE)
names(data_train)
nrow(data_train)
nrow(data_test)
dtMatrix <- create_matrix(data_train$text)
container <- create_container(dtMatrix, data_train$class, trainSize=1:nrow(data_train),virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
predictionData <-data_test$text
predSize <- length(predictionData)
predMatrix <- create_matrix(predictionData, originalMatrix=dtMatrix)
predictionContainer <- create_container(predMatrix, data_test$class, testSize=1:predSize, virgin=FALSE)
results <- classify_model(predictionContainer, model)
df <- data.frame(predictionData,data_test$class.,results)
write.csv(df,file = "myresults-ubuntu.csv")
df <- data.frame(predictionData,data_test$class,results)
write.csv(df,file = "myresults-ubuntu.csv")
