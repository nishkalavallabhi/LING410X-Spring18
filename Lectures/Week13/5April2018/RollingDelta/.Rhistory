exit
quit()
install.packages("swirl")
library(swirl)
install.packages("swirl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("swirl")
install.packages("openssl")
install.packages("openssl")
install.packages("httpr")
install.packages("swirl")
library(swirl)
swirl()
install.packages(c("GuardianR", "gutenbergr", "tm", "topicmodels"))
library(readr)
library(swirl)
swirl()
clear
cls
cyclones <- "For only the second time in its history, the Iowa State Athletics Department finished in the Top 40 of the nation's most-successful athletics departments from a competitive standpoint. The 2014 Learfield Sports Directors' Cup final tally has the Cyclones in 38th place with 585.75 points. The school's all-time best finish is 34th in 2010. Iowa State had the fifth-best finish among Big 12 schools and tops in the state of Iowa. The school earned 160 points in the spring season, which equaled its all-time record. The women’s track \& field (60), women’s golf (51) and men’s golf (49) accounted for the spring points. ISU had averaged only 46 points in the spring season previously. Iowa State also earned points from wrestling (64.5), men's basketball (64), women's cross country (63), gymnastics (59.25), women's indoor track \& field (51.5), men's indoor track \& field (46.5), men's cross country (27), women's basketball (25) and volleyball (25)."
source('~/Dropbox/ClassroomSlides-BothCourses/LING410X/Resources/26JanWeek3-Class2/A1-Q2Discussion.R')
source('~/Dropbox/ClassroomSlides-BothCourses/LING410X/Resources/26JanWeek3-Class2/A1-Q2Discussion.R')
source('~/Dropbox/ClassroomSlides-BothCourses/LING410X/Resources/26JanWeek3-Class2/A1-Q2Discussion.R')
cyclones_lower <- tolower(cyclones)
gsub("[0-9][0-9]", "NUM", cyclones_lower) #This will also replace 2014 as NUMNUM
gsub("\\d{2}\\W", "NUM", cyclones_lower)
gsub("\\d{2}\\w", "NUM ", cyclones_lower)
gsub("\\d{2}\\s", "NUM ", cyclones_lower)
gsub("\\s\\d{2}\\s", "NUM ", cyclones_lower)
gsub("(\\s|\\()\\d{2}(\\s|\\))", "NUM ", cyclones_lower)
gsub("[10-99]^[\d]", "NUM", cyclones_lower)
gsub("[10-99]^[\\d]", "NUM", cyclones_lower)
gsub("\b[10-99][a-z\\(\\)]", "NUM", cyclones_lower)
gsub("\b[10-99]", "NUM", cyclones_lower)
gsub("[10-99]", "NUM ", cyclones_lower)
cyclones <- "For only the second time in its history, the Iowa State Athletics Department finished in the Top 40 of the nation's
most-successful athletics departments from a competitive standpoint. The 2014 Learfield Sports Directors' Cup final tally has the
Cyclones in 38th place with 585.75 points. The school's all-time best finish is 34th in 2010. Iowa State had the fifth-best finish
among Big 12 schools and tops in the state of Iowa. The school earned 160 points in the spring season, which equaled its all-time record.
The women’s track & field (60), women’s golf (51) and men’s golf (49) accounted for the spring points. ISU had averaged only 46 points
in the spring season previously. Iowa State also earned points from wrestling (64.5), men's basketball (64), women's cross country (63),
gymnastics (59.25), women's indoor track & field (51.5), men's indoor track & field (46.5), men's cross country (27),
women's basketball (25) and volleyball (25)."
#Lowercase content
cyclones_lower <- tolower(cyclones)
gsub("\d{2}[a-z]", "NUM ", cyclones_lower)
gsub("\\d{2}[a-z]", "NUM ", cyclones_lower)
gsub("\\d{2}", "NUM ", cyclones_lower)
gsub("\\d{2}^\\d", "NUM ", cyclones_lower)
gsub("\\d{2}\\D", "NUM ", cyclones_lower)
gsub("\\D\\d{2}\\D", "NUM ", cyclones_lower)
gsub("\\D\\d{2}\\D\s", "NUM ", cyclones_lower)
gsub("\\D\\d{2}\\D\\s", "NUM ", cyclones_lower)
cyclones_lower
gsub("\\D\\d{2}\\D", "NUM ", cyclones_lower)
gsub("\\D\\d{2}\\D", " NUM ", cyclones_lower)
gsub("\\D\\d{2}\\D", " NUM\\2 ", cyclones_lower)
cyclones_lower
gsub("^[0-9]{2}$", " NUM\\2 ", cyclones_lower)
gsub("^[0-9]{2}$", " NUM ", cyclones_lower)
gsub("\\s[0-9]{2}$", " NUM ", cyclones_lower)
gsub("\\s[0-9]{2}", " NUM ", cyclones_lower)
gsub("(\\s|\\()[0-9]{2}(\\s|\\)|th)", " NUM ", cyclones_lower)
cyclones_lower
gsub("(\\s|\\()[0-9]{2}(\\s|\\)|th)", "\\1NUM\\2", cyclones_lower)
strsplit(cyclones_lower,"\\.")
toTitleCase(cyclones_lower)
library(tools)
toTitleCase(cyclones_lower)
library(stringr)
str_to_title(cyclones_lower)
install.packages("twitteR")
install.packages("ROAuth")
install.packages(c("twitteR", "streamR"))
library(ROAuth)
library(twitteR)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
my_api_key <- "jGXXJFeTs1FSksrd3VSwBxR6D"
my__api_secret <- "B0tAN6pCcF8YkSLXi3nNZAJYlKKoK9bKQZBbBvJKtE7RyV4B1a"
my_oauth <- OAuthFactory$new(consumerKey=my_api_key, consumerSecret=my_api_secret, requestURL=requestURL, accessURL=accessURL, authURL=authURL)
my_api_key <- "jGXXJFeTs1FSksrd3VSwBxR6D"
my_api_secret <- "B0tAN6pCcF8YkSLXi3nNZAJYlKKoK9bKQZBbBvJKtE7RyV4B1a"
my_oauth <- OAuthFactory$new(consumerKey=my_api_key, consumerSecret=my_api_secret, requestURL=requestURL, accessURL=accessURL, authURL=authURL)
save(my_oauth, file="oauth_token.Rdata")
accessToken = '634512278-zXpfdtx7isxdAoK8YHnc78QfswLbMssnUgvLEfga'
accessSecret = 'OuW5FdB0UOUTJoixRbIwJaQwdFtZ0zZCClM15tj8Oyy0g'
setup_twitter_oauth(consumer_key=my_key, consumer_secret=my_secret, access_token=accessToken, access_secret=accessSecret)
tweets <- searchTwitter("Iowa", n=100)
setup_twitter_oauth(consumer_key=my_api_key, consumer_secret=my_api_secret, access_token=accessToken, access_secret=accessSecret)
tweets <- searchTwitter("Iowa", n=100)
my_oauth <- OAuthFactory$new(consumerKey=my_api_key, consumerSecret=my_api_secret, requestURL=requestURL,
accessURL=accessURL, authURL=authURL)
rm(list = ls())
library(ROAuth)
library(twitteR)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
my_key <- "jGXXJFeTs1FSksrd3VSwBxR6D"
my_oauth <- OAuthFactory$new(consumerKey=my_key, consumerSecret=my_secret, requestURL=requestURL, accessURL=accessURL, authURL=authURL)
my_secret <- "B0tAN6pCcF8YkSLXi3nNZAJYlKKoK9bKQZBbBvJKtE7RyV4B1a"
my_oauth <- OAuthFactory$new(consumerKey=my_key, consumerSecret=my_secret, requestURL=requestURL, accessURL=accessURL, authURL=authURL)
accessToken = '634512278-zXpfdtx7isxdAoK8YHnc78QfswLbMssnUgvLEfga'
accessSecret = 'OuW5FdB0UOUTJoixRbIwJaQwdFtZ0zZCClM15tj8Oyy0g'
setup_twitter_oauth(consumer_key=my_key, consumer_secret=my_secret, access_token=accessToken, access_secret=accessSecret)
tweets <- searchTwitter("Iowa", n=100)
tweets_frame <- twListToDF(tweets)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
moby <- scan("mobydick.txt", what = "character", sep = "\n")
moby.start <- which (moby ==  "CHAPTER 1. Loomings.")
moby.end <- which (moby == "orphan.")
moby.actual <- moby[moby.start:moby.end]
moby.chap.positions <- grep("^CHAPTER \\d", moby.actual)
#moby.actual[moby.chap.positions]
moby <- scan("mobydick.txt", what = "character", sep = "\n")
moby.start <- which (moby ==  "CHAPTER 1. Loomings.")
moby.end <- which (moby == "orphan.")
moby.actual <- moby[moby.start:moby.end]
moby.chap.positions <- grep("^CHAPTER \\d", moby.actual)
moby.last.position <- length(moby.actual)
moby.chap.positions <- c(moby.chap.positions, moby.last.position)
moby.chap.positions
chapters.raw <- list()
for (i in 1:(length(moby.chap.positions) -1))
{
titleline <- moby.chap.positions[i]
title <- moby.actual[titleline]
start <- titleline+1
end   <- moby.chap.positions[i+1]-1
chapter.lines <- moby.actual[start:end]
chapter.string <- tolower(paste(chapter.lines, collapse = " "))
chapter.string <- gsub(" +", " ", gsub("[[:punct:]]", " ", chapter.string))
chapter.words <- unlist(strsplit(chapter.string, "\\W"))
chapter.freqs <- table(chapter.words)
chapters.raw[[title]] <- chapter.freqs
}
vector1 $<-$ c(name="Sowmya", courseNum=410, office=331, address="Ross")
vector1 <- c(name="Sowmya", courseNum=410, office=331, address="Ross")
vector1
lista <- list(1,2,3,4)
vectora <- c(1,2,3,4)
listb <- list(1,"a",TRUE,4)
vectorb <- c(1, "a", TRUE, 4)
list1 <- list(name="Sowmya", courseNum=410, office=331, address="Ross")
vector1 <- c(name="Sowmya", courseNum=410, office=331, address="Ross")
chapters.raw
vector1 <- c(1, "a", TRUE, 4)
vector1\
vector1
list1 <- list(1, "a", TRUE, 4)
list1
list1 <- list(name="Sowmya", courseNum=410, office=331, address="Ross")
vector1 <- c(name="Sowmya", courseNum=410, office=331, address="Ross")
list1
vector1
chapters.raw[[1]]
chapters.raw[1]
chapters.raw[[1]][1]
chapters.raw[[1]][[1]]
whaledetails < −lapply (chapters.raw , ”[”, ”whale”)
whaledetails <− lapply (chapters.raw , ”[”, ”whale”)
whaledetails <− lapply (chapters.raw , "[", "whale")
whaledetails <- lapply (chapters.raw , "[", "whale")
whaledetails
whale_counts = c()
for (i in 1:length(whale))
{
whale_counts[i] <- whale[[i]]
}
whale <- lapply(chapters.raw, "[", "whale")
whale_counts = c()
for (i in 1:length(whale))
{
whale_counts[i] <- whale[[i]]
}
whale_counts
plot(whale_counts)
plot(whale_counts, type="h")
plot(whale_counts, type="b")
?table
?sort
typeof(sort)
typeof(?sort)
?seq
matrix(1:6, ncol=3)
m <-  matrix(1:6, ncol=3)
m[1,]
m[,1]
array(1:8, dim=c(2, 2, 2))
array(1:8, dim=c(2, 1, 2))
array(1:8, dim=c(2, 2, 2))
array(1:4, dim=c(2, 1, 2))
array(1:4, dim=c(2, 2, 2))
array(1:4, dim=c(2, 2))
a <- seq(1:5)
line_number <- seq(1:5)
names <- c("Santa", "Banta", "Manta", "Tanta", "Anton")
college <- c("LAS", "Business", "Engineering", "LAS", VetMed)
college <- c("LAS", "Business", "Engineering", "LAS", "VetMed")
data.frame(line_number,names, college)
df <- data.frame(line_number,names, college)
df$line_number
df$college
factor(df$college)
factor(college)
moby <- scan("mobydick.txt", what = "character", sep = "\n")
moby.start <- which (moby ==  "CHAPTER 1. Loomings.")
moby.end <- which (moby == "orphan.")
moby.actual <- moby[moby.start:moby.end]
moby.chap.positions <- grep("^CHAPTER \\d", moby.actual)
moby.actual[moby.chap.positions]
moby.last.position <- length(moby.actual)
moby.chap.positions <- c(moby.chap.positions, moby.last.position)
moby.actual[moby.chap.positions]
chapters.raw <- list()
for (i in 1:(length(moby.chap.positions) -1))
{
titleline <- moby.chap.positions[i]
title <- moby.actual[titleline]
start <- titleline+1
end   <- moby.chap.positions[i+1]-1
chapter.lines <- moby.actual[start:end]
chapter.string <- tolower(paste(chapter.lines, collapse = " "))
chapter.string <- gsub(" +", " ", gsub("[[:punct:]]", " ", chapter.string))
chapter.words <- unlist(strsplit(chapter.string, "\\W"))
chapter.freqs <- table(chapter.words)
chapters.raw[[title]] <- chapter.freqs
}
chapters.raw[[1]]
sum(chapters.raw[[1]])
length(chapers[[1]])
length(chapters.raw[[1]])
sum_of_all_word_freqs_chapter1 <- sum(chapters_raw[[1]])
num_words_in_chapter1 <- length(chapters_raw[[1]])
mean_word_freq_chapter1 <- sum_of_all_word_freqs_chapter1/num_words_in_chapter1
sum_of_all_word_freqs_chapter1 <- sum(chapters.raw[[1]])
num_words_in_chapter1 <- length(chapters.raw[[1]])
mean_word_freq_chapter1 <- sum_of_all_word_freqs_chapter1/num_words_in_chapter1
mean_word_freq_chapter1
mean(chapters.raw[[1]])
lapply(chapters.raw, "[[")
lapply(chapters.raw, "[")
?sapply
lapply(chapters.raw, mean)
lapply(chapters.raw, mean)
length(chapters.raw)
means = c()
for(i in 1:length(chapters.raw))
{
means[i] <- sum(chapters.raw[[i]])/length(chapters.raw)
}
means
means = c()
for(i in 1:length(chapters.raw))
{
means[i] <- sum(chapters.raw[[i]])/length(chapters.raw[[i]])
}
means
matrix(lapply(chapters.raw,mean))
vector(lapply(chapters.raw,mean))
?rbind
rbind(lapply(chapters.raw, mean))
?lapply
sapply(chapters.raw, mean)
trial <- sapply(chapters.raw, mean)
class(trial)
typeof(trial)
trial <- sapply(chapters.raw, mean, simplify="vector")
trial
trial[[1]]
trial[[2]]
plot(trial)
trial <- sapply(chapters.raw, mean)
trial <- lapply(chapters.raw, mean)
plot(trial)
trial <- sapply(chapters.raw, mean)
trial <- lapply(chapters.raw, mean)
trial
typeof(trial)
unname(trial)
unlist(unname(trial))
trial <- lapply(chapters.raw, mean)
unlist(trial)
trial <- lapply(chapters.raw, mean)
unlist(trial)
unname(unlist(trial))
means <- lapply(chapters.raw, mean)
means <- unlist(means)
means <- unname(means)
means
par(mfrow=c(1,2))
plot(means, type="h")
plot(scale(means), type = "h")
means <- lapply(chapters.raw, mean)
sort(means)
means <- unlist(means)
sort(means)
sort(means, decreasing=TRUE)
hapax <- sapply(chapters.raw, function(x) sum(x == 1))
hapax
unname(hapax)
unlist(hapax)
unname(hapax)
lapply(chapters.raw,length)
lapply(chapters.raw,sum)
hapax <- sapply(chapters.raw, function(x) sum(x == 1))
hapax <- unname(hapax)
lengths <- lapply(chapters.raw, sum)
new <- hapax/lengths
lengths
hapax <- sapply(chapters.raw, function(x) sum(x == 1))
hapax <- unname(hapax)
lengths <- lapply(chapters.raw, sum)
new <- hapax/lengths
hapax <- sapply(chapters.raw, function(x) sum(x == 1))
hapax <- unname(hapax)
lengths <- unname(sapply(chapters.raw, sum))
new <- hapax/lengths
new
?par
hapax <- sapply(chapters.raw, function(x) sum(x == 1:5))
hapax
moby <- scan("mobydick.txt", what = "character", sep = "\n")
moby.start <- which (moby ==  "CHAPTER 1. Loomings.")
moby.end <- which (moby == "orphan.")
moby.actual <- moby[moby.start:moby.end]
moby <- scan("mobydick.txt", what = "character", sep = "\n")
moby.start <- which (moby ==  "CHAPTER 1. Loomings.")
moby.end <- which (moby == "orphan.")
moby.actual <- moby[moby.start:moby.end]
moby.actual <- tolower(paste(moby.actual, collapse = " "))
moby.actual <- gsub(" +", " ", gsub("[[:punct:]]", " ", moby.actual)
moby.words <- unlist(strsplit(moby.actual, "\\W"))
moby.freqs <- table(moby.words)
moby <- scan("mobydick.txt", what = "character", sep = "\n")
moby.start <- which (moby ==  "CHAPTER 1. Loomings.")
moby.end <- which (moby == "orphan.")
moby.actual <- moby[moby.start:moby.end]
moby.actual <- tolower(paste(moby.actual, collapse = " "))
moby.actual <- gsub(" +", " ", gsub("[[:punct:]]", " ", moby.actual)
)
moby.words <- unlist(strsplit(moby.actual, "\\W"))
moby.freqs <- table(moby.words)
moby.freqs
max_freq <- sort(moby.freqs, decreasing = TRUE)
max_freq <- sort(moby.freqs, decreasing = TRUE)[1]
max_freq
max_freq <- sort(moby.freqs, decreasing = TRUE)[[1]]
max_freq
what_i_want <- c()
for(i in min_freq:max_freq)
{
what_i_want[i] <- length(sapply(moby.freqs, function(x) x==i))
}
what_i_want
min_freq <- 1
what_i_want <- c()
for(i in min_freq:max_freq)
{
what_i_want[i] <- length(sapply(moby.freqs, function(x) x==i))
}
min_freq <- 1
what_i_want <- c()
for(i in min_freq:100)
{
what_i_want[i] <- length(sapply(moby.freqs, function(x) x==i))
}
what_i_want
what_i_want <- c()
for(i in min_freq:100)
{
what_i_want[i] <- length(sapply(moby.freqs, function(x) sum(x==i)))
}
what_i_want
moby.freqs
max_freq
sapply(moby.freqs, function(x) sum(x)==1)
max_freq
sapply(moby.freqs, function(x) sum(x)==14715)
length(sapply(moby.freqs, function(x) sum(x)==14715))
sapply(moby.freqs, function(x) sum(x)==14715)
sapply(moby.freqs, function(x) sum(x)==14715)["TRUE"]
length(which(sapply(moby.freqs, function(x) sum(x)==14715))
)
length(which(sapply(moby.freqs, function(x) sum(x)==1))
)
length(which(sapply(moby.freqs, function(x) sum(x)==1)))
max_freq
length(which(sapply(moby.freqs, function(x) sum(x)==14175)))
for(i in min_freq:100)
{
what_i_want[i] <- length(which(sapply(moby.freqs, function(x) sum(x)==14175)))
}
plot(what_i_want)
for(i in min_freq:100)
{
what_i_want[i] <- length(which(sapply(moby.freqs, function(x) sum(x)==i)))
}
plot(what_i_want)
plot(unname(sort(moby.freqs, decreasing = TRUE)))
plot(moby.freqs)
freqslist <- unname(sort(moby.freqs, decreasing = TRUE))
freqslist
plot(freqslist, type="b")
plot(freqslist)
plot(unlist(freqslist))
typeof(freqslist)
freqslist <- sort(moby.freqs, decreasing = TRUE)
freqslist <- unlist(sort(moby.freqs, decreasing = TRUE))
freqslist
length(moby.freqs)
length(freqslist)
vec <- unname(freqslist)
typeof(vec)
class(vec)
plot(vec)
class(freqslist)
library(mallet)
install.packages("rJava")
R
quit()
library("rJava")
library("mallet")
quit()
install.packages("stylo")
library(stylo)
stylo()
setwd("~/Dropbox/ClassroomSlides-BothCourses/LING410X/Resources/4April2017/Stylo")
stylo()
par(mfrow=c(3,3))
stylo()
stylo()
setwd("~/Dropbox/ClassroomSlides-BothCourses/LING410X/Resources/4April2017/RollingDelta")
rolling.delta()
rolling.delta()
rolling.delta()
rolling.delta()
rolling.delta()
rolling.delta()
rolling.delta()
rolling.delta()
rolling.delta()
